<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.jex01.board.mapper.BoardMapper"> <!-- namespace 이름맞추기가 중요함 -->

    <insert id="insert"> <!-- 원래는 resultType에 java.lang.String으로 적어야 하지만 통칭 string 으로 가능 -->
        insert into tbl_board (title,content,writer)
        values(#{title},#{content},#{writer}) ON DUPLICATE KEY UPDATE title=#{title}, content=#{content},writer=#{writer}

        <selectKey order="AFTER" resultType="long" keyProperty="bno">
            select last_insert_id() <!-- 마지막으로 insert한 후 order에 맞게 insert한 숫자를 select함 -->
        </selectKey>
    </insert>

    <sql id="search"> <!-- sql에 구멍을 내는 것 -->
        <!-- separator는 반복이 끝나는 구간마다 " OR "를 넣으라는 의미 -->
        <if test="type != null">
        <foreach collection="arr" item="item" separator=" OR " open="WHERE (" close=")">
            <if test="item == 'T'.toString()">
                title like concat('%', #{keyword}, '%')
            </if>
            <if test="item == 'C'.toString()">
                content like concat('%', #{keyword}, '%')
            </if>
            <if test="item == 'W'.toString()">
                writer like concat('%', #{keyword}, '%')
            </if>
        </foreach>
        </if>
    </sql>

    <select id="getList" resultType="org.zerock.jex01.board.domain.Board"> <!-- 아직 pagizing 처리 디테일하게 x -->
        select * from tbl_board

        <include refid="search"></include> <!-- 위에 id가 search인 sql문을 삽입 -->

        order by bno desc limit #{skip},#{size}
    </select>

    <select id="getCount" resultType="int">
        select count(bno) from tbl_board

        <include refid="search"></include>
    </select>

    <resultMap id="boardMap" type="org.zerock.jex01.board.domain.Board">
        <!-- board의 bno와 attach의 bno의 구분이 필요함 -->
        <id property="bno" column="bno"></id>
        <result property="title" column="title"></result> <!-- board에만 존재하는 컬럼 -->
        <result property="content" column="content"></result>
        <result property="writer" column="writer"></result>
        <result property="regDate" column="regDate"></result>
        <result property="modDate" column="modDate"></result>
        <result property="replyCnt" column="replyCnt"></result>

        <collection property="attachList" resultMap="attachMap" ></collection> <!-- 우리가 선언한 list의 이름은 attachList -->
    </resultMap>

    <resultMap id="attachMap" type="org.zerock.jex01.board.domain.BoardAttach">
        <result property="uuid" column="uuid"></result>
        <result property="bno" column="bno"></result>
        <result property="fileName" column="fileName"></result>
        <result property="path" column="path"></result>
        <result property="image" column="image"></result>
    </resultMap>

    <select id="select" resultMap="boardMap"> <!-- sql처리후 위에 resultMap의 형식으로 가져오겠다 -->
        select *
        from
            tbl_board board left join tbl_attach ta on board.bno = ta.bno
        where board.bno = #{bno}
    </select>

    <delete id="delete">
        delete from tbl_board where bno = #{bno}
    </delete>

    <update id="update">
        update tbl_board set title = #{title}, content = #{content}, modDate = now()
        where bno = #{bno}
    </update>

    <update id="updateReplyCnt">
        update tbl_board set replycnt = replycnt + #{num} where bno = #{bno}
    </update>


    <insert id="insertAttach">
        insert into tbl_attach (uuid, bno, path, filename, image)
            values (#{uuid}, #{bno}, #{path}, #{fileName}, #{image})
    </insert>

    <delete id="deleteAttach">
        delete from tbl_attach where bno = #{bno}
    </delete>




</mapper>

        <!-- 자바소스 파일 패키지에 xml 파일을 넣는 것은 흔치 않은 일이다. -->